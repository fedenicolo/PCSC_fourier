#include "gtest/gtest.h"
#include "Fourier.h"
#include <complex>
#include <Eigen/Dense>


class FourierTest : public ::testing::Test{

    protected:
        void SetUp() override {
            fft_result_test.resize(128);
            fft_result_test << std::complex<double>(-2.83491909e-14, +0.00000000e+00), std::complex<double>(-1.86757404e-14, -2.56186243e-14), std::complex<double>(-1.48169883e-14, -1.39888101e-14), std::complex<double>( 7.35153010e-15, -2.71025664e-14), std::complex<double>( 3.70542445e-14, +4.69044589e-15), std::complex<double>( 1.22316131e-14, +1.28156106e-14), std::complex<double>( 5.38907074e-15, -2.17603713e-14), std::complex<double>( 3.92797438e-14, -2.29496177e-14), std::complex<double>( 2.98531908e-14, +9.89832631e-14), std::complex<double>(-1.38669361e-14, +1.23180699e-13), std::complex<double>(-8.66343657e-14, +6.35399606e-14), std::complex<double>(-1.25271530e-13, +2.83447387e-14), std::complex<double>(-5.77652007e-14, -4.11596345e-14), std::complex<double>(-4.77846038e-15, -3.97465140e-14), std::complex<double>(-2.28105941e-14, -1.06581410e-14), std::complex<double>(-3.12516664e-14, +3.22418973e-14), std::complex<double>(-7.11095007e-14, +3.55208327e-14), std::complex<double>(-1.44719361e-13, -1.20206947e-14), std::complex<double>(-1.05411187e-13, -1.32338585e-13), std::complex<double>( 3.27813548e-15, -1.50691004e-13), std::complex<double>( 4.52770269e-14, -7.11807894e-14), std::complex<double>( 5.34917965e-14, -3.64912481e-14), std::complex<double>( 4.51342620e-14, +1.15416975e-14), std::complex<double>( 1.51663870e-14, -2.50107267e-14), std::complex<double>( 1.94924631e-14, +7.19252140e-15), std::complex<double>(-8.49777963e-15, +1.76847170e-14), std::complex<double>(-5.32621560e-14, +4.18784164e-15), std::complex<double>( 1.32477774e-16, -2.37099264e-14), std::complex<double>(-5.86507382e-15, -4.32598864e-14), std::complex<double>(-8.00551994e-14, -5.23395288e-14), std::complex<double>( 1.30283884e-14, -6.85306784e-14), std::complex<double>( 9.37902752e-14, -1.50075106e-14), std::complex<double>( 2.48860031e-14, -3.95239397e-14), std::complex<double>( 3.81458498e-15, +3.60101378e-14), std::complex<double>( 1.17022325e-15, -2.50910404e-14), std::complex<double>(-7.17381745e-15, -2.77966211e-14), std::complex<double>( 1.51790335e-14, +2.50789249e-14), std::complex<double>(-6.40133243e-14, +2.36406687e-14), std::complex<double>(-7.56572101e-14, -5.30686606e-14), std::complex<double>( 3.68002625e-14, -1.10127119e-13), std::complex<double>( 2.72805873e-14, +2.80030433e-14), std::complex<double>( 1.42608624e-14, -1.26183036e-13), std::complex<double>( 7.60042753e-14, -1.79717365e-14), std::complex<double>( 5.46519448e-14, -1.22462785e-14), std::complex<double>( 2.17446676e-14, +4.02114798e-14), std::complex<double>(-1.12373810e-14, +1.86636052e-14), std::complex<double>(-2.54751293e-14, -3.99680289e-14), std::complex<double>( 3.89825874e-14, -6.60473512e-14), std::complex<double>( 3.49502449e-14, +2.50847362e-14), std::complex<double>(-6.59901693e-15, -3.85732111e-14), std::complex<double>( 8.02181026e-14, -6.40000000e+01), std::complex<double>( 1.38447784e-14, -3.04744590e-14), std::complex<double>( 5.05665583e-14, +9.63313764e-15), std::complex<double>( 4.82380960e-14, +3.49559755e-14), std::complex<double>(-3.11212543e-14, +2.42656544e-14), std::complex<double>( 8.71340553e-15, -3.06362421e-15), std::complex<double>( 2.60263958e-14, -5.34010069e-14), std::complex<double>(-6.16852795e-15, +2.00569774e-14), std::complex<double>( 6.93434744e-14, -4.75561604e-14), std::complex<double>( 5.14289725e-14, +1.26278976e-13), std::complex<double>(-3.61965517e-16, -1.01257078e-13), std::complex<double>( 3.21652745e-14, +1.32762872e-13), std::complex<double>(-4.71872078e-14, -1.19861966e-14), std::complex<double>(-3.67441741e-14, -7.15756489e-15), std::complex<double>( 5.72490043e-14, +0.00000000e+00), std::complex<double>(-3.67441741e-14, +7.15756489e-15), std::complex<double>(-4.85677683e-14, +1.26565425e-14), std::complex<double>( 3.21652745e-14, -1.32762872e-13), std::complex<double>(-3.61965517e-16, +1.01257078e-13), std::complex<double>( 5.14289725e-14, -1.26278976e-13), std::complex<double>( 6.88938277e-14, +4.57411886e-14), std::complex<double>(-6.16852795e-15, -2.00569774e-14), std::complex<double>( 2.60263958e-14, +5.34010069e-14), std::complex<double>( 8.71340553e-15, +3.06362421e-15), std::complex<double>(-3.06123561e-14, -2.46109114e-14), std::complex<double>( 4.82380960e-14, -3.49559755e-14), std::complex<double>( 5.05665583e-14, -9.63313764e-15), std::complex<double>( 1.38447784e-14, +3.04744590e-14), std::complex<double>( 7.48890321e-14, +6.40000000e+01), std::complex<double>(-6.59901693e-15, +3.85732111e-14), std::complex<double>( 3.49502449e-14, -2.50847362e-14), std::complex<double>( 3.89825874e-14, +6.60473512e-14), std::complex<double>(-2.72514862e-14, +4.35207426e-14), std::complex<double>(-1.12373810e-14, -1.86636052e-14), std::complex<double>( 2.17446676e-14, -4.02114798e-14), std::complex<double>( 5.46519448e-14, +1.22462785e-14), std::complex<double>( 7.62220927e-14, +1.68800119e-14), std::complex<double>( 1.42608624e-14, +1.26183036e-13), std::complex<double>( 2.72805873e-14, -2.80030433e-14), std::complex<double>( 3.68002625e-14, +1.10127119e-13), std::complex<double>(-7.60773137e-14, +5.48199033e-14), std::complex<double>(-6.40133243e-14, -2.36406687e-14), std::complex<double>( 1.51790335e-14, -2.50789249e-14), std::complex<double>(-7.17381745e-15, +2.77966211e-14), std::complex<double>(-9.07149436e-16, +2.33489910e-14), std::complex<double>( 3.81458498e-15, -3.60101378e-14), std::complex<double>( 2.48860031e-14, +3.95239397e-14), std::complex<double>( 9.37902752e-14, +1.50075106e-14), std::complex<double>( 1.36047211e-14, +6.90558721e-14), std::complex<double>(-8.00551994e-14, +5.23395288e-14), std::complex<double>(-5.86507382e-15, +4.32598864e-14), std::complex<double>( 1.32477774e-16, +2.37099264e-14), std::complex<double>(-5.25645711e-14, -2.88657986e-15), std::complex<double>(-8.49777963e-15, -1.76847170e-14), std::complex<double>( 1.94924631e-14, -7.19252140e-15), std::complex<double>( 1.51663870e-14, +2.50107267e-14), std::complex<double>( 4.41469826e-14, -1.02991716e-14), std::complex<double>( 5.34917965e-14, +3.64912481e-14), std::complex<double>( 4.52770269e-14, +7.11807894e-14), std::complex<double>( 3.27813548e-15, +1.50691004e-13), std::complex<double>(-1.07187544e-13, +1.32338585e-13), std::complex<double>(-1.44719361e-13, +1.20206947e-14), std::complex<double>(-7.11095007e-14, -3.55208327e-14), std::complex<double>(-3.12516664e-14, -3.22418973e-14), std::complex<double>(-2.81396646e-14, +1.42108547e-14), std::complex<double>(-4.77846038e-15, +3.97465140e-14), std::complex<double>(-5.77652007e-14, +4.11596345e-14), std::complex<double>(-1.25271530e-13, -2.83447387e-14), std::complex<double>(-8.73305643e-14, -6.33455048e-14), std::complex<double>(-1.38669361e-14, -1.23180699e-13), std::complex<double>( 2.98531908e-14, -9.89832631e-14), std::complex<double>( 3.92797438e-14, +2.29496177e-14), std::complex<double>( 6.05711257e-15, +2.05228386e-14), std::complex<double>( 1.22316131e-14, -1.28156106e-14), std::complex<double>( 3.70542445e-14, -4.69044589e-15), std::complex<double>( 7.35153010e-15, +2.71025664e-14), std::complex<double>(-1.35438434e-14, +1.45353199e-14), std::complex<double>(-1.86757404e-14, +2.56186243e-14); 
            fft_signal.resize(128);
            fft_signal << 0.00000000e+00,  6.34393284e-01, -9.80785280e-01,  8.81921264e-01, -3.82683432e-01, -2.90284677e-01,  8.31469612e-01, -9.95184727e-01, 7.07106781e-01, -9.80171403e-02, -5.55570233e-01,  9.56940336e-01, -9.23879533e-01,  4.71396737e-01,  1.95090322e-01, -7.73010453e-01, 1.00000000e+00, -7.73010453e-01,  1.95090322e-01,  4.71396737e-01, -9.23879533e-01,  9.56940336e-01, -5.55570233e-01, -9.80171403e-02, 7.07106781e-01, -9.95184727e-01,  8.31469612e-01, -2.90284677e-01, -3.82683432e-01,  8.81921264e-01, -9.80785280e-01,  6.34393284e-01, -4.91096681e-16, -6.34393284e-01,  9.80785280e-01, -8.81921264e-01, 3.82683432e-01,  2.90284677e-01, -8.31469612e-01,  9.95184727e-01, -7.07106781e-01,  9.80171403e-02,  5.55570233e-01, -9.56940336e-01, 9.23879533e-01, -4.71396737e-01, -1.95090322e-01,  7.73010453e-01, -1.00000000e+00,  7.73010453e-01, -1.95090322e-01, -4.71396737e-01, 9.23879533e-01, -9.56940336e-01,  5.55570233e-01,  9.80171403e-02, -7.07106781e-01,  9.95184727e-01, -8.31469612e-01,  2.90284677e-01, 3.82683432e-01, -8.81921264e-01,  9.80785280e-01, -6.34393284e-01, 9.82193362e-16,  6.34393284e-01, -9.80785280e-01,  8.81921264e-01, -3.82683432e-01, -2.90284677e-01,  8.31469612e-01, -9.95184727e-01, 7.07106781e-01, -9.80171403e-02, -5.55570233e-01,  9.56940336e-01, -9.23879533e-01,  4.71396737e-01,  1.95090322e-01, -7.73010453e-01, 1.00000000e+00, -7.73010453e-01,  1.95090322e-01,  4.71396737e-01, -9.23879533e-01,  9.56940336e-01, -5.55570233e-01, -9.80171403e-02, 7.07106781e-01, -9.95184727e-01,  8.31469612e-01, -2.90284677e-01, -3.82683432e-01,  8.81921264e-01, -9.80785280e-01,  6.34393284e-01, 1.27375647e-14, -6.34393284e-01,  9.80785280e-01, -8.81921264e-01, 3.82683432e-01,  2.90284677e-01, -8.31469612e-01,  9.95184727e-01, -7.07106781e-01,  9.80171403e-02,  5.55570233e-01, -9.56940336e-01, 9.23879533e-01, -4.71396737e-01, -1.95090322e-01,  7.73010453e-01, -1.00000000e+00,  7.73010453e-01, -1.95090322e-01, -4.71396737e-01, 9.23879533e-01, -9.56940336e-01,  5.55570233e-01,  9.80171403e-02, -7.07106781e-01,  9.95184727e-01, -8.31469612e-01,  2.90284677e-01, 3.82683432e-01, -8.81921264e-01,  9.80785280e-01, -6.34393284e-01;
            fourier.load_signal(fft_signal, false);
            fourier.transform()
        }

    
    Eigen::VectorXcd fft_result_test;
    Eigen::VectorXd fft_signal;
    Fourier fourier;
};


TEST_F(FourierTest, PowerOfTwo){
    EXPECT_EQ(fourier.__is_power_of_2((unsigned int) 2), true);
    EXPECT_EQ(fourier.__is_power_of_2((unsigned int) 4), true);
    EXPECT_EQ(fourier.__is_power_of_2((unsigned int) 8), true);
    EXPECT_EQ(fourier.__is_power_of_2((unsigned int) 17), false);
    EXPECT_EQ(fourier.__is_power_of_2((unsigned int) 256), true);
}

TEST_F(FourierTest, NextPowerOfTwo){
    EXPECT_EQ(fourier.__next_power_of_2((unsigned int) 1), 1);
    EXPECT_EQ(fourier.__next_power_of_2((unsigned int) 2), 2);
    EXPECT_EQ(fourier.__next_power_of_2((unsigned int) 6), 8);
    EXPECT_EQ(fourier.__next_power_of_2((unsigned int) 10), 16);
    EXPECT_EQ(fourier.__next_power_of_2((unsigned int) 20), 32);
}

TEST_F(FourierTest, Transform){

}